Parsec/Many«"# Parsing Multiple Terms

This module contains additional combinators that are useful when parsing sequences or expressions. They are adapted from the original Parsec library."¸ import«Control/Monad¸ Data/Array¸ Parsec/Parser»¸ type«"Type definition for a binary function that has the same domain and range type. Effectively a monoid append operation without the restriction that it has to be associative."¸ alias«BinaryOp«a»¸ ->«a¸ a¸ a»»»¸ define«"## Parsing Separated Lists

Parse an array containing at least one element. The items of the array are recognized by `parser`. The items are separated by input recognized by `separator`. The function returns an array of parsed elements."¸ oneOrMoreSeparatedBy«->«Parser«a¸ i»¸ Parser«b¸ i»¸ Parser«[«a»¸ i»»¸ ->«parser¸ separator¸ mdo«mlet«x¸ parser»¸ mlet«xs¸ zeroOrMore«>>«separator¸ parser»»»¸ mreturn«[«x¸ ...«xs»»»»»»¸ "Parse a potentially empty array. Arguments are same as in the previous function."¸ zeroOrMoreSeparatedBy«->«Parser«a¸ i»¸ Parser«b¸ i»¸ Parser«[«a»¸ i»»¸ ->«parser¸ separator¸ or«oneOrMoreSeparatedBy«parser¸ separator»¸ parseRet«[»»»»¸ "## Terminators & Brackets

Parse item(s) followed by a terminator given in the `after` argument. The result of parser is returned, and result of after is ignored."¸ followedBy«->«Parser«a¸ i»¸ Parser«b¸ i»¸ Parser«a¸ i»»¸ ->«parser¸ after¸ mdo«mlet«res¸ parser»¸ mlet«_¸ after»¸ mreturn«res»»»»¸ "Parse item(s) surrounded by input recognized by the `surround` parser. The result of `parser` is returned."¸ surroundedBy«->«Parser«a¸ i»¸ Parser«b¸ i»¸ Parser«a¸ i»»¸ ->«parser¸ surround¸ mdo«mlet«_¸ surround»¸ mlet«res¸ parser»¸ mlet«_¸ surround»¸ mreturn«res»»»»¸ "Parse item(s) surrounded by an opening and closing bracket. The result of the `parser` is returned."¸ bracketedBy«->«Parser«a¸ i»¸ Parser«b¸ i»¸ Parser«c¸ i»¸ Parser«a¸ i»»¸ ->«parser¸ open¸ close¸ mdo«mlet«_¸ open»¸ mlet«res¸ parser»¸ mlet«_¸ close»¸ mreturn«res»»»»¸ "## Parsing Expression

Parse one or more occurrences of `parser`, separated by `operation`. Return a value obtained by a left associative application of all functions returned by `operation` to the values returned by `parser`. This parser can for example be used to eliminate left recursion which typically occurs in expression grammars."¸ chainOneOrMore«->«Parser«a¸ i»¸ Parser«BinaryOp«a»¸ i»¸ Parser«a¸ i»»¸ ->«parser¸ operation¸ mdo«mlet«x¸ parser»¸ mlet«fys¸ zeroOrMore«mdo«mlet«f¸ operation»¸ mlet«y¸ parser»¸ mreturn«(«f¸ y»»»»»¸ mreturn«@fold«fys¸ x¸ ->>«res¸ fy¸ do«let«(«f¸ y»¸ fy»¸ f«res¸ y»»»»»»»»»»